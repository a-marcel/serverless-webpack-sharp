# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: s3-image-resizer

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: serverless

# you can overwrite defaults here
  stage: dev
  region: eu-central-1

  deploymentBucket:
    name: serverless.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
      Resource: "arn:aws:s3:::${self:custom.bucket_name}/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${self:custom.bucket_name}/*"

# you can define service wide environment variables here

custom:
  bucket_name: image-resizer
  
  webpack:
    forceInclude:
      - sharp
    packagerOptions:
      scripts:
        - npm rebuild sharp --target=6.10.0 --target_arch=x64 --target_platform=linux

  stageVariables:
    BUCKET: ${self:custom.bucket_name}
    URL: "/test"

resources:
  Resources:
    PathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn: ApiGatewayStage
      Properties:
        BasePath: resize
        DomainName: xxx.xxx.xx
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}

    __deployment__:
      Properties:
        Description: This is my deployment

    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName : ${self:provider.stage}
        MethodSettings:
          - DataTraceEnabled: false
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: false


plugins:
  - serverless-webpack
#  - serverless-plugin-cloudfront-lambda-edge
  - serverless-plugin-bind-deployment-id
  - serverless-plugin-stage-variables

# you can add packaging information here
package:
  include:
    - .webpack/node_modules
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: resize/{size}/{image}
          method: GET

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
